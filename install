#!/bin/zsh

PROJECT_PATH="~/Projects/sparkbuzz/.dotfiles"
ARCHIVE_PATH="~/Downloads/dotfiles.zip"
ARCHIVE_URL="https://github.com/sparkbuzz/.dotfiles/archive/refs/heads/master.zip"

# Check OS first, this repo is only expected to work on macOS.
#
if [[ $OSTYPE != "darwin"* ]]; then
  echo "This .dotfiles configuration will most likely not work with this OS! Aborting."
  exit 1
fi

# Prompt for sudo password at the beginning of the script.
sudo echo '' > /dev/null

# Check if .dotfiles.zip already exits
#
local OVERWRITE_ZIP
if [[ -f $ARCHIVE_PATH ]]; then
  echo "${ARCHIVE_PATH} already exists! Overwrite? [y/n] "
  read -q OVERWRITE_ZIP
  echo ""
fi

exit

# Download sparkbuzz/dotfiles.zip
#
if [[ ! -f $ARCHIVE_PATH ]] || [[ $OVERWRITE_ZIP == "y" ]]; then
  echo "Fetching dotfiles.zip from sparkbuzz/.dotfiles"
  curl \
    --location \
    --output $ARCHIVE_PATH \
    --remote-name $ARCHIVE_URL \
    --remote-header-name \
    --silent
fi
unset OVERWRITE_ZIP

# Check if the archive has already been extracted
#
local OVERWRITE_PROJECT
if [[ -d $PROJECT_PATH ]]; then
  echo "${PROJECT_PATH} already exists! Overwrite? [y/n] "
  read -q OVERWRITE_PROJECT
  echo ""

  if [[ $OVERWRITE_PROJECT == "y" ]]; then
    rm -rf $PROJECT_PATH
  fi
fi

# Extract the downloaded .dotfiles.zip archive
#
if [[ ! -e $PROJECT_PATH ]] || [[ $OVERWRITE_PROJECT == "y" ]]; then 
  echo "Unzipping archive to ${PROJECT_PATH}"
  mkdir -p $PROJECTS_PATH
  unzip $ARCHIVE_PATH -d $PROJECTS_PATH
  mv ${PROJECT_PATH}-master $PROJECT_PATH
  rm $ARCHIVE_PATH
fi
unset OVERWRITE_PROJECT

# Install Homebrew
#
echo "Install Homebrew"
if ! command -v brew > /dev/null; then
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
else
  echo "Skipping, Homebrew already installed"
fi

# Install Kitty
local REINSTALL_KITTY
echo -e "\nInstall Kitty"
if brew list --cask -1 | grep kitty &> /dev/null; then
  printf "Kitty already installed, reinstall? [y/n] "
  read -q REINSTALL_KITTY 
  echo ""

  [[ -d /Applications/Kitty.app ]] && rm -rf /Applications/Kitty.app
  [[ -d /Applications/Terminal.app ]] && rm -rf /Applications/Terminal.app

  if [ "$REINSTALL_KITTY" = "y" ]; then
    echo "Reinstalling Kitty"
    brew reinstall --cask kitty
  fi
else
  echo "Installing Kitty"
  brew install --cask kitty
fi
unset REINSTALL_KITTY

# Kitty.app will now start, macOS will ask if this app is safe.
# Upon closing Kitty, the script proceeds with:
#   - renaming Kitty.app to Terminal.app
#   - updating the Kitty icon with a different icon
#
if [[ -d /Applications/Kitty.app ]] || [[ ! -d /Applications/Terminal.app ]] ; then
  local PATCH_KITTY

  printf "\nRename Kitty.app to Terminal.app [y/n] "
  read -q PATCH_KITTY
  echo ""

  if [[ $PATCH_KITTY = "y" ]]; then
    echo "\nFirst we need to tell macOS that kitty.app is safe"
    echo "Kitty will now start in a new application window"
    echo " - Accept the macOS warning stating that Kitty was downloaded from the internet"
    echo " - Then simply quit Kitty to proceed with patching in this terminal"
    open -g -W /Applications/kitty.app

    echo -e "\nPatching Kitty.app"
    echo "Renaming Kitty.app to Terminal.app"
    mv -f /Applications/Kitty.app /Applications/Terminal.app

    # Hack the Kitty icon with a custom terminal icon
    #
    echo "Replacing Kitty.app icon and updating application display name"
    sudo cp ./kitty-patch/terminal.icns /Applications/Terminal.app/Contents/Resources/terminal.icns
    # TODO: Might be better to find/replace the original Info.plist file
    sudo cp ./kitty-patch/Info.plist /Applications/Terminal.app/Contents/Info.plist

    # Kitty crashes unless the _CodeSignature folder is deleted.
    # It might appear Kitty works the first time, but after an OS restart, it starts failing
    #
    sudo rm -rf /Applications/Terminal.app/Contents/_CodeSignature

    echo "Force refreshing Kitty changes"
    sudo touch /Applications/Terminal.app
    sudo killall Finder && sudo killall Dock
  else
    echo "Skipping Kitty patch"
  fi

  unset PATCH_KITTY
fi

# Install Homebrew packages
#
echo -e "\n Install Homebrew packages"
for package in \
  antibody \
  bat \
  direnv \
  neovim \
  stow \
  tmux \
  tree \
  # exa 
  # fzf
  # git 
  # htop
  # ripgrep 
  # yarn
; do
  # Prompt for reinstall
  echo "\nInstalling package: ${package}"
  brew install $package 
done

# Install Nerd Fonts
#
echo -e "\nInstalling Nerd Fonts"
for font in \
  font-caskaydia-cove-nerd-font \
  font-fantasque-sans-mono-nerd-font \
  font-fira-code-nerd-font \
  font-iosevka-nerd-font \
  font-jetbrains-mono-nerd-font \
  font-monoid-nerd-font \
  font-victor-mono-nerd-font \
; do
 echo "\nInstalling font: ${font}" 
 # TODO: Prompt reinstall y/n/a
 brew install $font
done

# Bundle zsh plugins
#
echo -e "\nConfiguring zsh plugins with Antibody"
antibody bundle < ./stow/zsh/.zsh_plugins.txt > ./stow/zsh/.zsh_plugins.sh

# Run GNU Stow to symlink dotfiles
#
echo -e "\nStowing .dotfiles"
cd ./stow
for package in \
  git \
  kitty \
  zsh \
; do
  echo "Stowing ${package}"
  stow --target=$HOME $package
done
cd -

echo -e "\nDone! Please restart the terminal sessio, and enjoy!"
