#!/bin/zsh

# sparkbuzz/.dotfiles install script
# ══════════════════════════════════════════════════════════════════════════════


# Variables
# ══════════════════════════════════════════════════════════════════════════════

# Path where dotfiles is extracted to
#
dotfiles_tmp='/tmp/.dotfiles-master'

# Destination path where projects will reside
#
projects_path="${HOME}/Projects/sparkbuzz"

# Destination path where .dotfiles will be moved to
#
dotfiles_path="${HOME}/Projects/sparkbuzz/.dotfiles"

# Path where dotfiles archive is downloaded to
#
dotfiles_zip='/tmp/dotfiles.zip'

# URL from which the repository .zip archive is downloaded
#
download_url='https://github.com/sparkbuzz/.dotfiles/archive/refs/heads/master.zip'

# Path to .dotfiles log file
#
log='/var/log/dotfiles.log'


# Pre installation checks
# ══════════════════════════════════════════════════════════════════════════════

# Don't fall asleep
#
caffeinate -i -w $$ &

# Check OS first, this repo is only expected to work on macOS.
#
if [[ $OSTYPE != 'darwin'* ]]; then
  printf 'sparkbuzz/.dotfiles does not work with this OS! Aborting.\n'
  exit 1
fi

printf 'Let'\''s get this Mac ready for coding!!!\n'

# Prompt for sudo password at the beginning of the script.
#
sudo -v

printf '\n'

# Setup /var/log/dotfiles/log 
# ══════════════════════════════════════════════════════════════════════════════

printf 'Logging to %s\n' "$log"
sudo touch $log
sudo chown "$(whoami)":staff "$log"
: > $log

printf '\n'


# Fetch and configure sparkbuzz/.dotfiles source from GitHub
# ══════════════════════════════════════════════════════════════════════════════

printf 'Fetch and configure .dotfiles source\n'

dotfiles_exists='n'

# Check if $dotfiles_path already exists
#
if [[ -d $dotfiles_path ]]; then
  printf '  ⦿ %s already exists! Overwrite? [y/n] ' "$dotfiles_path"
  read -qr overwrite_dotfiles_path
  printf '\n'

  if [[ $overwrite_dotfiles_path == 'y' ]]; then
    rm -rf "$dotfiles_path"
    rm -rf "$dotfiles_tmp"
  else
    printf '  ⦿ Using existing %s\n' "$dotfiles_path"
    dotfiles_exists='y'
  fi
fi

# Download and extract source from sparkbuzz/.dotfiles
#
if [[ $dotfiles_exists == 'n' ]] || [[ $overwrite_dotfiles_path == 'y' ]]; then
  # Check if dotfiles.zip has already been downloaded
  if [[ -f $dotfiles_zip ]]; then
    printf '  ⦿ %s already exists! Download again and overwrite? [y/n] ' "$dotfiles_zip"
    read -qr overwrite_zip
    printf ''
  fi

  # Download sparkbuzz/dotfiles.zip from GitHub
  #
  if [[ ! -f $dotfiles_zip ]] || [[ $overwrite_zip == 'y' ]]; then
    printf '  ◌ Downloading %s ' "$download_url"

    curl \
      --location \
      --output $dotfiles_zip \
      --remote-name $download_url \
      --remote-header-name \
      --silent

    printf '\033[2K\r  ⦿ Downloading %s\n' "$download_url"
  fi

  # Extract the downloaded .dotfiles.zip archive
  #
  if [[ ! -e $dotfiles_path ]]; then
    printf '  ⦿ Extracting %s to %s\n' "$dotfiles_zip" "$dotfiles_tmp"
    [[ -d "$dotfiles_tmp" ]] && rm -rf "$dotfiles_tmp"
    unzip -q $dotfiles_zip -d /tmp
    
    printf '  ⦿ Moving %s to %s\n' "$dotfiles_tmp" "$dotfiles_path"
    mkdir -p "$projects_path"
    mv "$dotfiles_tmp" "$dotfiles_path"
    
    printf '  ⦿ Removing %s\n' "$dotfiles_zip"
    rm $dotfiles_zip
  else
    printf '  ⦿ Using existing %s \n' "$dotfiles_zip"
  fi
fi

printf '\n'


# Install Homebrew
# ══════════════════════════════════════════════════════════════════════════════

printf 'Homebrew\n'
if ! command -v brew > /dev/null; then
  printf '  ◌ Installing Homebrew '

  curl \
    --fail \
    --location \
    --output $HOME/Downloads/install-brew.sh \
    --remote-name https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh \
    --show-error \
    --silent
    
  chmod +x $HOME/Downloads/install-brew.sh
  (NONINTERACTIVE=1 $HOME/Downloads/install-brew.sh >> "$log" 2>&1)

  printf '\033[2K\r  ⦿ Installing Homebrew\n'
else
  printf '  ⦿ Skipping, Homebrew already installed\n'
fi

# Report on the current Homebrew version
#
printf '\n'
brew --version
brew doctor

printf '\n'


# Install Homebrew packages
# ══════════════════════════════════════════════════════════════════════════════

printf 'Homebrew packages\n'

packages=(
  antibody
  bat
  direnv
  neovim
  stow
  tree
)

for package in "${packages[@]}"; do
  printf '  ◌ %s ' "$package"

  # NOTE: Subshell here is intentional, the script was behaving badly otherwise
  # TODO: Prompt for reinstall y/n/a
  (brew install "$package" >> "$log" 2>&1)

  printf '\033[2K\r  ⦿ %s\n' "$package" 
done

printf '\n'


# Install Nerd Fonts
# ══════════════════════════════════════════════════════════════════════════════

printf 'Nerd Fonts\n'

fonts=(
  homebrew/cask-fonts/font-caskaydia-cove-nerd-font
  homebrew/cask-fonts/font-fantasque-sans-mono-nerd-font
  homebrew/cask-fonts/font-fira-code-nerd-font
  homebrew/cask-fonts/font-iosevka-nerd-font
  homebrew/cask-fonts/font-jetbrains-mono-nerd-font
  homebrew/cask-fonts/font-monoid-nerd-font
  homebrew/cask-fonts/font-meslo-lg-nerd-font
  homebrew/cask-fonts/font-victor-mono-nerd-font
)

for font in "${fonts[@]}"; do \
  printf '  ◌ %s ' "$font"

  # NOTE: Subshell here is intentional, the script was behaving badly otherwise
  # TODO: Prompt reinstall y/n/a
  (brew install "$font" >> "$log" 2>&1)

  printf '\033[2K\r  ⦿ %s\n' "$font"
done

printf '\n'


# Install Casks
# ══════════════════════════════════════════════════════════════════════════════

printf 'Installing Casks\n'

casks=(
  1password
  affinity-designer
  affinity-photo
  affinity-publisher
  alfred
  # autodesk-fusion360
  # blender
  boom-3d
  caffeine
  cakebrew
  daisydisk
  docker
  dozer
  evernote
  firefox
  # freecad
  geektool
  gitkraken
  glance
  google-chrome
  # kicad
  launchcontrol
  libreoffice
  parallels
  slack
  whatsapp
  xbar
)

for cask in "${casks[@]}"; do \
  printf '  ◌ %s ' "$cask"

  # NOTE: Subshell here is intentional, the script was behaving badly otherwise
  # TODO: Prompt reinstall y/n/a
  (brew install --cask "$cask" >> "$log" 2>&1)

  printf '\033[2K\r  ⦿ %s\n' "$cask"
done

printf '\n'


# Install Kitty
# ══════════════════════════════════════════════════════════════════════════════

printf 'Kitty terminal\n'
if brew list --cask -1 | grep kitty &> /dev/null; then
  printf '  ⦿ Kitty already installed, reinstall? [y/n] '
  read -qr reinstall_kitty 
  printf '\n'

  if [[ $reinstall_kitty == 'y' ]]; then
    [[ -d /Applications/Kitty.app ]] && rm -rf /Applications/Kitty.app
    [[ -d /Applications/Terminal.app ]] && rm -rf /Applications/Terminal.app

    printf '  ◌ Reinstalling Kitty terminal '
    (brew reinstall --cask kitty >> "$log" 2>&1)
    printf '\033[2K\r  ⦿ Reinstalling Kitty terminal\n'
  fi
else
  printf '  ◌ Installing Kitty terminal '
  (brew install --cask kitty >> "$log" 2>&1)
  printf '\033[2K\r  ⦿ Installing Kitty terminal\n'
fi


# Kitty patch
# ══════════════════════════════════════════════════════════════════════════════
# ⦿ renames kitty.app to Terminal.app
# ⦿ updates application display name to 'Terminal'
# ⦿ replaces the Kitty icon with a nicer Terminal icon

if [[ -d /Applications/Kitty.app ]] && [[ ! -d /Applications/Terminal.app ]] ; then
  printf '  ⦿ Patch Kitty icon and rename to Terminal.app? [y/n] '
  read -qr patch_kitty
  printf '\n'

  if [[ $patch_kitty = 'y' ]]; then
    printf '\n  Before patching, macOS needs to know that kitty.app is safe\n'
    printf '  Kitty will now start in a new application window:\n'
    printf '    ⦿ accept the macOS warning stating that Kitty was downloaded from the internet\n'
    printf '    ⦿ then completely quit Kitty to proceed with patching in this terminal\n'
    printf '\n  Note: The screen might flicker since the script forces Finder and Dock to restart\n'

    open -g -W /Applications/kitty.app

    printf '\n  ⦿ Renaming Kitty.app to Terminal.app\n'
    mv -f /Applications/Kitty.app /Applications/Terminal.app

    # Hack the Kitty icon with a custom terminal icon
    # TODO: Might be better to find/replace the original Info.plist file
    #
    printf '  ⦿ Replacing the Kitty.app icon\n'
    sudo cp "$dotfiles_path"/kitty-patch/terminal.icns /Applications/Terminal.app/Contents/Resources/terminal.icns
    
    printf '  ⦿ Updating Info.plist\n'
    sudo cp "$dotfiles_path"/kitty-patch/Info.plist /Applications/Terminal.app/Contents/Info.plist

    # Kitty crashes unless the _CodeSignature folder is deleted.
    # It might appear Kitty works the first time, but after an OS restart, it starts failing
    #
    printf '  ⦿ Removing Kitty app code signature\n'
    sudo rm -rf /Applications/Terminal.app/Contents/_CodeSignature

    printf '  ⦿ Force refreshing changes\n'
    sudo touch /Applications/Terminal.app
    sudo killall Finder && sudo killall Dock
  else
    printf '  ⦿ Skipping the Kitty patch\n'
  fi
fi

printf '\n'


# Bundle zsh plugins
# ══════════════════════════════════════════════════════════════════════════════

printf 'Antibody\n'
printf '  ⦿ Configuring Zsh plugins\n'
antibody bundle < "$dotfiles_path"/stow/zsh/.zsh_plugins.txt > "$dotfiles_path"/stow/zsh/.zsh_plugins.sh

printf '\n'


# Run GNU Stow to symlink dotfiles
# ══════════════════════════════════════════════════════════════════════════════

printf '\nGNU Stow\n'
printf '  ⦿ Stowing .dotfiles in %s\n' "$HOME"
cd "$dotfiles_path"/stow || exit

packages=(
  git
  kitty
  zsh
)

for package in "${packages[@]}"; do
  printf '  ⦿ %s\n' "$package"
  stow --target="$HOME" "$package"
done
cd - || exit

printf '\n'

# Done!
# ══════════════════════════════════════════════════════════════════════════════

printf 'Please restart your terminal session, and enjoy!\n\n'
